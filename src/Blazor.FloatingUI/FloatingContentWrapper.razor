@implements IAsyncDisposable

@ChildContent

@code {

    [Parameter, EditorRequired] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter, EditorRequired] public string ContentId { get; set; } = null!;
    [Parameter, EditorRequired] public string TriggerId { get; set; } = null!;
    [Parameter, EditorRequired] public FloatingSettingsModel Settings { get; set; } = null!;

    [Inject] public required FloatingJsProvider FloatingJs { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FloatingJs.ComputePosition(ContentId, TriggerId, Settings);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public ValueTask DisposeAsync()
    {
        return FloatingJs.Remove(TriggerId);
    }

}